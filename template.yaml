AWSTemplateFormatVersion: "2010-09-09"
Resources: 
  LambdaExecutionRoleForEC2KeyPairCreator:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - ec2:CreateKeyPair
              - ec2:DeleteKeyPair
            Resource: "*"
          - Effect: Allow
            Action:
              - s3:CreateBucket
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              - s3:DeleteBucket
            Resource: "*"
  EC2KeyPairCreator:
      Type: "AWS::Lambda::Function"
      Properties:
        Code:
          ZipFile: !Sub |
            from __future__ import print_function
            import json
            import urllib2
            import cfnresponse
            import boto3
            from time import sleep

            def lambda_handler(event, context):
              print(event)
              bucketname = str("${AWS::StackName}") + '-' + str("${AWS::AccountId}") 
              keypairname = bucketname
              objectname = bucketname + ".pem"
              if event['RequestType'] == "Create":
                kp = boto3.client('ec2').create_key_pair(KeyName=keypairname)
                s3client = boto3.client('s3')
                s3client.create_bucket(Bucket=bucketname)
                s3put = s3client.put_object(Bucket=bucketname,Key=objectname,Body=str(kp['KeyMaterial']),ServerSideEncryption="AES256")
                sleep(2)
                keypairurl = str(s3client.generate_presigned_url('get_object', Params = {'Bucket': bucketname, 'Key': objectname}, ExpiresIn = 36000))   
                responseData = {}
                responseData['keypairname'] = keypairname
                responseData['keypairurl'] = keypairurl
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "EC2KeyPairCreator")
              if event['RequestType'] == "Delete":
                print("Deleting resources...")
                boto3.client('ec2').delete_key_pair(KeyName=keypairname)
                s3client = boto3.client('s3')
                s3delete = s3client.delete_object(Bucket=bucketname,Key=objectname)
                sleep(2)
                s3client.delete_bucket(Bucket=bucketname)
                responseData = {}
                responseData['keypairname'] = "Deleted: True"
                responseData['keypairurl'] = "Deleted: True"
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "EC2KeyPairCreator")
              if event['RequestType'] == "Change":
                print("Nothing is done with this resource upon stack change...")
                responseData = {}
                responseData['keypairname'] = "Untouched: True"
                responseData['keypairurl'] = "Untouched: True"
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "EC2KeyPairCreator")
        Description: Lambda function that will create an EC2 KeyPair.
        FunctionName: !Ref AWS::StackName 
        Handler: index.lambda_handler
        Role : !GetAtt LambdaExecutionRoleForEC2KeyPairCreator.Arn
        Runtime: python2.7
        Timeout: 20
  CreateKeyPair:
    Type: Custom::EC2KeyPairCreatorDirectInvocation
    Properties:
      ServiceToken: !GetAtt EC2KeyPairCreator.Arn
#  Ec2Instance: 
#    Type: "AWS::EC2::Instance"
#    DependsOn: CreateKeyPair
#    Properties:
#      ImageId: "ami-97785bed" #Amazon Linux AMI in us-east-1. This is just for testing anyway...
#      KeyName: 
#          Fn::Join:
#              - '-'
#              - - !Ref 'AWS::StackName'
#                - !Ref 'AWS::AccountId'
Outputs:
  EC2KeyPairURL: 
    Value: 
      Fn::GetAtt: 
        - CreateKeyPair
        - keypairurl
  EC2KeyPairName: 
    Value: 
      Fn::GetAtt: 
        - CreateKeyPair
        - keypairname
