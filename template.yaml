AWSTemplateFormatVersion: "2010-09-09"
Resources: 
  LambdaExecutionRoleForEC2KeyPairCreator:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - ec2:CreateKeyPair
              - ec2:DeleteKeyPair
            Resource: "*"
          - Effect: Allow
            Action:
              - s3:CreateBucket
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              - s3:DeleteBucket
            Resource: "*"
  KeyPairCreator:
      Type: "AWS::Lambda::Function"
      Properties:
        Code:
          ZipFile: !Sub |
            from __future__ import print_function
            import json
            import urllib2
            import logging
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)
            import boto3
            from time import sleep
            SUCCESS = 'SUCCESS'

            def callback_success(event, keypairname, keypairurl):
              response = {
                  "StackId": event["StackId"],
                  "RequestId": event["RequestId"],
                  "LogicalResourceId": event["LogicalResourceId"],
                  "Status": SUCCESS,
                  "Data": {
                    "keypairname": keypairname,
                    "keypairurl": keypairurl
                  }
              }
              if event.get("PhysicalResourceId", False):
                response["PhysicalResourceId"] = event["PhysicalResourceId"]
              else:
                response["PhysicalResourceId"] = event["LogicalResourceId"] + "-12345"
              serialized = json.dumps(response)
              logger.info("Responding with: %s" % (serialized))
              req = urllib2.Request(
                event['ResponseURL'], data=serialized,
                headers={'Content-Length': len(serialized),
                         'Content-Type': ''}
              )
              req.get_method = lambda: 'PUT'
              try:
                  urllib2.urlopen(req)
                  logger.debug("Request to CFN API succeeded, nothing to do here")
              except urllib2.HTTPError as e:
                  logger.error("Callback to CFN API failed with status %d" % e.code)
                  logger.error("Response: %s" % e.reason)
              except urllib2.URLError as e:
                  logger.error("Failed to reach the server - %s" % e.reason)

            def lambda_handler(event, context):
              print(event)
              bucketname = str("${AWS::StackName}") + '-' + str("${AWS::AccountId}") 
              objectname = bucketname + ".pem"
              if event['RequestType'] == "Create":
                kp = boto3.client('ec2').create_key_pair(KeyName=bucketname)
                keypairname= str(bucketname)
                s3client = boto3.client('s3')
                s3client.create_bucket(Bucket=bucketname)
                s3put = s3client.put_object(Bucket=bucketname,Key=objectname,Body=str(kp['KeyMaterial']),ServerSideEncryption="AES256")
                sleep(1)
                keypairurl = str(s3client.generate_presigned_url('get_object', Params = {'Bucket': bucketname, 'Key': objectname}, ExpiresIn = 36000))
                callback_success(event, keypairname, keypairurl)
              if event['RequestType'] == "Delete":
                print("Do nothing")
                boto3.client('ec2').delete_key_pair(KeyName=bucketname)
                s3client = boto3.client('s3')
                s3delete = s3client.delete_object(Bucket=bucketname,Key=objectname)
                sleep(1)
                s3client.delete_bucket(Bucket=bucketname)
                callback_success(event, "Deleted=True", "Deleted=True")
              if event['RequestType'] == "Change":
                print("Nothing is done with this resource upon stack change")
                callback_success(event, "Untouched=True", "Untouched=True")
        Description: Lambda function that will create an EC2 KeyPair.
        FunctionName: !Ref AWS::StackName 
        Handler: index.lambda_handler
        Role : !GetAtt LambdaExecutionRoleForEC2KeyPairCreator.Arn
        Runtime: python2.7
        Timeout: 20
  CreateKeyPair:
    Type: Custom::KeyPairCreatorDirectInvocation
    Properties:
      ServiceToken: !GetAtt KeyPairCreator.Arn
  Ec2Instance: 
    Type: "AWS::EC2::Instance"
    DependsOn: CreateKeyPair
    Properties: 
      ImageId: "ami-97785bed" #Amazon Linux AMI in us-east-1. This is just for testing anyway...
      KeyName: 
          Fn::Join:
              - '-'
              - - !Ref 'AWS::StackName'
                - !Ref 'AWS::AccountId'
Outputs:
  KeyPairURL: 
    Value: 
      Fn::GetAtt: 
        - CreateKeyPair
        - keypairurl
  KeyPairName: 
    Value: 
      Fn::GetAtt: 
        - CreateKeyPair
        - keypairname
